name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1) - leave empty to use current'
        required: false
        type: string
      target:
        description: 'Publishing target'
        required: true
        default: 'test-pypi'
        type: choice
        options:
          - 'test-pypi'
          - 'pypi'
          - 'both'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Install uv
      uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Get version
      id: version
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
          # Update version in pyproject.toml for manual dispatch
          sed -i "s/version = \"[^\"]*\"/version = \"$VERSION\"/" pyproject.toml
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "📦 Building version: $VERSION"

    - name: Run comprehensive tests
      run: |
        # Run full test suite with coverage
        uv run pytest tests/ -v --cov=src/schema_gen --cov-report=xml --cov-fail-under=65

        # Run format validation tests (syntax and execution validation)
        uv run pytest tests/test_format_validation.py -v

        # Test all generators
        uv run python scripts/check_compatibility.py --library all-generators

        # Comprehensive format validation with external tool validation
        uv run python scripts/validate_all_formats.py --verbose

    - name: Run Docker-based comprehensive validation
      run: |
        # Build Docker validation environment
        docker build -f Dockerfile.validation -t schema-gen-validation .

        # Run comprehensive validation in Docker with all external compilers
        docker run --rm -v $PWD:/app schema-gen-validation /bin/bash -c "
          cd /app &&
          dev-setup &&
          test-all-formats-docker
        "

    - name: Run linting and type checking
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/

    - name: Test CLI functionality
      run: |
        # Test basic CLI commands
        uv run schema-gen --help
        uv run schema-gen --version

        # Test project initialization in clean directory
        mkdir test_project && cd test_project
        uv run schema-gen init

        # Test generation with created schemas
        uv run schema-gen generate --verbose

        # Test validation
        uv run schema-gen validate

        # Verify generated files exist and are valid Python
        test -f generated/pydantic/user_models.py
        python -c "import sys; sys.path.append('generated/pydantic'); import user_models"

    - name: Build package
      run: |
        uv build --verbose

        # List built files
        ls -la dist/

        # Show package contents
        uv run pip install twine
        uv run python -m twine check dist/* --strict

    - name: Verify package installation
      run: |
        # Test installation from wheel
        cd /tmp
        pip install $GITHUB_WORKSPACE/dist/*.whl
        python -c "import schema_gen; print(f'✅ Package installed successfully: {schema_gen.__version__}')"
        schema-gen --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  publish-test-pypi:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.target == 'test-pypi' || inputs.target == 'both')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref_name, 'alpha'))
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/schema-gen/
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: dist-${{ needs.build-and-test.outputs.version }}
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        skip-existing: true

    - name: Test installation from Test PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ schema-gen==${{ needs.build-and-test.outputs.version }} || true
        echo "🧪 Test PyPI publication completed"

  publish-pypi:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.target == 'pypi' || inputs.target == 'both')) ||
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc'))
    environment:
      name: pypi
      url: https://pypi.org/project/schema-gen/
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        name: dist-${{ needs.build-and-test.outputs.version }}
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        skip-existing: true

    - name: Verify PyPI publication
      run: |
        sleep 60  # Wait for package to be available
        pip install schema-gen==${{ needs.build-and-test.outputs.version }} || true
        echo "🚀 PyPI publication completed"

  create-github-release:
    needs: [build-and-test, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write  # For creating releases

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation from git log
        LAST_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"* %s" --since="1 month ago")
        else
          CHANGELOG=$(git log --pretty=format:"* %s" ${LAST_TAG}..HEAD)
        fi

        # Escape for GitHub output
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PRERELEASE_FLAG=""
        if [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        gh release create "${{ github.ref_name }}" \
          --title "🚀 Schema Gen v${{ needs.build-and-test.outputs.version }}" \
          --notes "## 📦 What's New in v${{ needs.build-and-test.outputs.version }}

        ${{ steps.changelog.outputs.changelog }}

        ## 🔗 Installation

        \`\`\`bash
        pip install schema-gen==${{ needs.build-and-test.outputs.version }}
        \`\`\`

        ## 🔗 Links

        - 📦 [PyPI Package](https://pypi.org/project/schema-gen/${{ needs.build-and-test.outputs.version }}/)
        - 📚 [Documentation](https://github.com/jagatsingh/schema-gen#readme)
        - 🐛 [Report Issues](https://github.com/jagatsingh/schema-gen/issues)" \
          $PRERELEASE_FLAG

  post-publish-notification:
    needs: [build-and-test, publish-pypi]
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Notify successful publication
      run: |
        echo "🎉 Successfully published schema-gen v${{ needs.build-and-test.outputs.version }} to PyPI!"
        echo ""
        echo "📦 Package: https://pypi.org/project/schema-gen/"
        echo "🔗 Install: pip install schema-gen"
        echo "📚 Documentation: https://github.com/jagatsingh/schema-gen#readme"
