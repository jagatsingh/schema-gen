# Version compatibility matrix for testing schema generators
# This file defines the latest supported versions for each target library
# Testing is focused on Python 3.12+ with current latest versions

version_matrix:
  # Python libraries with version dependencies (latest versions only)
  pydantic:
    - "2.11.7"  # Current latest

  sqlalchemy:
    - "2.0.43"  # Current latest

  pathway:
    - "0.26.1"  # Current latest

  # Schema/serialization libraries with Python packages (latest versions only)
  avro:
    - "1.12.0"  # Latest

  protobuf:
    - "5.28.0"  # Latest 5.x

  jsonschema:
    - "4.23.0"  # Latest 4.x

  graphql-core:
    - "3.2.3"   # Latest stable

  # JSON Schema specification versions (for syntax validation)
  jsonschema_spec:
    - "draft-07"      # JSON Schema Draft 7
    - "draft/2020-12" # JSON Schema Draft 2020-12

  # Language/runtime versions for non-Python generators (latest versions only)
  # These don't have Python package dependencies but we track compatibility
  languages:
    typescript:  # For Zod generator
      - "5.6.0"    # Latest

    java:        # For Jackson generator
      - "21"       # Current LTS

    kotlin:      # For Kotlin generator
      - "2.0.0"    # Latest

    graphql:     # For GraphQL generator
      - "16.9.0"   # Latest

# Test scenarios for Python 3.12+ with modern syntax
test_scenarios:
  basic_schema:
    description: "Basic schema with common field types using modern Python 3.12+ syntax"
    fields:
      - "id: int"
      - "name: str"
      - "email: str"
      - "age: int | None"  # Modern union syntax

  advanced_schema:
    description: "Advanced schema with constraints and relationships"
    fields:
      - "id: int with primary_key"
      - "username: str with constraints"
      - "tags: list[str]"  # Modern generic syntax
      - "metadata: dict[str, Any]"  # Modern generic syntax

  validation_schema:
    description: "Schema with extensive validation rules"
    fields:
      - "email: str with email format"
      - "phone: str with regex pattern"
      - "age: int with min/max values"
      - "score: float with range"
