# Version compatibility matrix for testing schema generators
# This file defines the supported versions for each target library

version_matrix:
  # Python libraries with version dependencies
  pydantic:
    - "2.9.0"   # Stable release
    - "2.10.0"  # Recent stable
    - "2.11.0"  # Latest stable
    - "2.11.7"  # Current latest

  sqlalchemy:
    - "2.0.25"  # Stable release
    - "2.0.36"  # Recent stable
    - "2.0.43"  # Current latest

  pathway:
    - "0.8.0"   # Recent
    - "0.9.0"   # Stable
    - "0.26.1"  # Current latest

  # Schema/serialization libraries with Python packages
  avro:
    - "1.11.0"  # Stable
    - "1.12.0"  # Latest

  protobuf:
    - "4.25.0"  # Stable 4.x
    - "5.28.0"  # Latest 5.x

  jsonschema:
    - "4.17.0"  # Stable 4.x
    - "4.21.0"  # Recent 4.x
    - "4.23.0"  # Latest 4.x

  graphql-core:
    - "3.2.0"   # Stable
    - "3.2.3"   # Latest stable

  # JSON Schema specification versions (for syntax validation)
  jsonschema_spec:
    - "draft-07"      # JSON Schema Draft 7
    - "draft/2020-12" # JSON Schema Draft 2020-12

  # Language/runtime versions for non-Python generators
  # These don't have Python package dependencies but we track compatibility
  languages:
    typescript:  # For Zod generator
      - "5.0.0"    # Stable
      - "5.6.0"    # Latest

    java:        # For Jackson generator
      - "11"       # LTS
      - "17"       # LTS
      - "21"       # Current LTS

    kotlin:      # For Kotlin generator
      - "1.9.0"    # Stable
      - "2.0.0"    # Latest

    graphql:     # For GraphQL generator
      - "16.8.0"   # Stable
      - "16.9.0"   # Latest

# Test scenarios for each version
test_scenarios:
  basic_schema:
    description: "Basic schema with common field types"
    fields:
      - "id: int"
      - "name: str"
      - "email: str"
      - "age: Optional[int]"

  advanced_schema:
    description: "Advanced schema with constraints and relationships"
    fields:
      - "id: int with primary_key"
      - "username: str with constraints"
      - "tags: List[str]"
      - "metadata: Dict[str, Any]"

  validation_schema:
    description: "Schema with extensive validation rules"
    fields:
      - "email: str with email format"
      - "phone: str with regex pattern"
      - "age: int with min/max values"
      - "score: float with range"
